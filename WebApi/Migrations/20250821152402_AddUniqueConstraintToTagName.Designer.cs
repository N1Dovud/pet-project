// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Services.Database;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(ToDoListDbContext))]
    [Migration("20250821152402_AddUniqueConstraintToTagName")]
    partial class AddUniqueConstraintToTagName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Services.Database.Entities.CommentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date_time");

                    b.Property<DateTime>("LastEditDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_edit_date_time");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text_note");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.TagEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("tag");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.ToDoListEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("todo_list");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.ToDoListTaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Assignee")
                        .HasColumnType("bigint")
                        .HasColumnName("assignee");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("DueDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("due_date_time");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int")
                        .HasColumnName("task_status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<long>("ToDoListId")
                        .HasColumnType("bigint")
                        .HasColumnName("todo_list_id");

                    b.HasKey("Id");

                    b.HasIndex("ToDoListId");

                    b.ToTable("todo_task");
                });

            modelBuilder.Entity("task_tag", b =>
                {
                    b.Property<long>("task_id")
                        .HasColumnType("bigint");

                    b.Property<long>("tag_id")
                        .HasColumnType("bigint");

                    b.HasKey("task_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("task_tag");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.CommentEntity", b =>
                {
                    b.HasOne("WebApi.Services.Database.Entities.ToDoListTaskEntity", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.ToDoListTaskEntity", b =>
                {
                    b.HasOne("WebApi.Services.Database.Entities.ToDoListEntity", "ToDoList")
                        .WithMany("Tasks")
                        .HasForeignKey("ToDoListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoList");
                });

            modelBuilder.Entity("task_tag", b =>
                {
                    b.HasOne("WebApi.Services.Database.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Services.Database.Entities.ToDoListTaskEntity", null)
                        .WithMany()
                        .HasForeignKey("task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.ToDoListEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WebApi.Services.Database.Entities.ToDoListTaskEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
